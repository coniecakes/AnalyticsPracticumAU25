---
title: "AU Analytics Practicum"
subtitle: "Autofill Tool"
author: 
  - name: "Conie O'Malley"
    affiliation: "American University"
    email: "co1984a@american.edu"
date: "`r Sys.Date()`"
format: 
  html:
    theme: cosmo 
    highlight-style: github 
    toc: true
    toc-depth: 4
    number-sections: true 
    embed-resources: true
    fig-width: 6 
    fig-height: 4
    df-print: paged
    code-fold: true
    #css: styles.css # Custom styling
    #include-after-body: footer.html # Custom footer
# bibliography: references.bib 
# link-citations: true
# version: "1.0"
---


```{r libraries}

# libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(readxl)

```


```{r data}

asset <- readxl::read_xlsx("data/Asset.xlsx")
industry_fall23_work_orders <- readxl::read_xlsx("data/Industry_Fall23_620 Work Order (2).xlsx")
task <- readxl::read_xlsx("data/Task.xlsx")
technicians <- readxl::read_xlsx("data/Technicians.xlsx")
work_order <- readxl::read_xlsx("data/Work Order.xlsx")

```

# EDA

## Identify categories to predict by workflow

### Work Order

User selects:

- New Work Order
  - New WO number is generated
  - Date is generated

- Work Category
  - Recommended `Work Type` is populated 
  - Recommended `Priority` is populated
  - Recommended `Source Type` is populated

- Task
  - Recommended `Technician` is populated
  - Recommended `Asset` is populated

- Location


```{r libraries}

# libraries
library(arules)
library(arulesViz)

work_order_filtered <- work_order %>% 
  dplyr::select(ClientXref, WorkCategory, Problem, WorkType, Priority, SourceType, Cause)

cols_to_factor <- c("ClientXref", "WorkCategory", "Problem", "WorkType", "Priority", "SourceType", "Cause")
work_order_filtered[cols_to_factor] <- lapply(work_order_filtered[cols_to_factor], as.factor)

```

```{r association rules}

# filter for client 49 - test run
client49_data <- work_order %>% 
  dplyr::filter(ClientXref == "Client 49")

# convert column variables to factors
cols_to_factor <- c("WorkCategory", "Problem", "WorkType", "Priority", "SourceType", "assetid")
client49_data[cols_to_factor] <- lapply(client49_data[cols_to_factor], as.factor)

# convert to transactions format
transactions <- as(client49_data[cols_to_factor], "transactions")

# run rules algorithm
client49_rules <- arules::apriori(transactions, parameter = list(support = 0.05, confidence = 0.8))

# sort rules by lift
client49_sorted_rules <- arules::sort(rules, by = "lift", decreasing = TRUE)

# view top rules
arules::inspect(client49_sorted_rules[1:10])

# basic plot
plot(client49_sorted_rules, method = "graph", engine = "htmlwidget")

# grouped matrix plot
plot(client49_sorted_rules, method = "grouped")

```


```{r new assoc rules}

clients <- unique(work_order_filtered$ClientXref)

client_rules <- list()

# loop through clients to generate rules
for (client in clients) {
  client_data <- work_order_filtered %>% filter(ClientXref == client)
  transactions <- as(as.data.frame(client_data[, c("WorkCategory", "Problem", "WorkType", "Priority", "SourceType",
                                                  "Cause")]), "transactions")
  rules <- arules::apriori(transactions, parameter = list(supp = 0.01, conf = 0.7))
  client_rules[[client]] <- rules
}

long_rules <- arules::subset(rules, size(lhs) >= 2)  # Rules with at least 2 conditions on lhs
arules::inspect(long_rules)

plot(long_rules, method = "graph", engine = "htmlwidget")

```

```{r filter rules}

# assign rules to df
rules_df <- as(rules, "data.frame")

# filter rules with count > 100
filtered_rules_df <- rules_df %>% 
  dplyr::filter(count >= 1000)

# Find the indices of the filtered rules
indices <- which(rules_df$count >= 1000)

# Subset the rules object using the indices
filtered_rules <- rules[indices]

# Inspect filtered rules
arules::inspect(filtered_rules)

plot(filtered_rules, method = "graph", engine = "htmlwidget")

interactive_plot <- plot(filtered_rules, method = "graph", engine = "htmlwidget")

# Save the interactive plot as a standalone HTML file
htmlwidgets::saveWidget(interactive_plot, "interactive_rules.html", selfcontained = TRUE)
```

```{r helper function test}

selected_fields <- list("WorkCategory" = "Electrical", "Priority" = "High")

get_autofill_suggestion(client_name = "Client 49",
                        selected_fields = selected_fields,
                        predict_field = "Problem",
                        client_rules_list = client_rules)

```


### DNU

```{r decision trees}

#library(rpart)
#library(rpart.plot)
library(tree)



client49_data <- work_order_filtered %>% 
  dplyr::filter(ClientXref == "Client 49")

# individual client tree 
client49_tree <- tree::tree(WorkType ~ Priority + SourceType,
                            data = client49_data)

# plot the tree
plot(client49_tree)
text(client49_tree, pretty = 0)

# full tree
client_tree <- tree::tree(ClientXref ~ Cause + WorkType + Priority + SourceType,
                            data = work_order_filtered)

plot(client_tree)
text(client_tree, pretty = 0)

# partitioned tree
clients <- unique(work_order_filtered$ClientXref)

# empty list to store trees
client_models <- list()

# loop over each client
for (client in clients) {
  client_data <- work_order_filtered %>%
    dplyr::filter(ClientXref == client)
  client_tree <- tree::tree(WorkType ~ Cause + Priority + SourceType,
                            data = client_data)
  client_models[[client]] <- client_tree
}

```